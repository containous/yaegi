package interp

// Code generated by 'go run ../cmd/genop/genop.go'. DO NOT EDIT.

import "reflect"

// Arithmetic operators

func add(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.String:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetString(v0(f).String() + v1(f).String())
			return next, n
		}
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) + v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) + v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetFloat(v0(f) + v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetComplex(v0(f).Complex() + v1(f).Complex())
			return next, n
		}
	}
}

func and(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) & v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) & v1(f))
			return next, n
		}
	}
}

func andnot(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) &^ v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) &^ v1(f))
			return next, n
		}
	}
}

func mul(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) * v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) * v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetFloat(v0(f) * v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetComplex(v0(f).Complex() * v1(f).Complex())
			return next, n
		}
	}
}

func or(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) | v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) | v1(f))
			return next, n
		}
	}
}

func quo(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) / v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) / v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetFloat(v0(f) / v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetComplex(v0(f).Complex() / v1(f).Complex())
			return next, n
		}
	}
}

func rem(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) % v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) % v1(f))
			return next, n
		}
	}
}

func shl(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) << v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) << v1(f))
			return next, n
		}
	}
}

func shr(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) >> v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) >> v1(f))
			return next, n
		}
	}
}

func sub(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) - v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) - v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetFloat(v0(f) - v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetComplex(v0(f).Complex() - v1(f).Complex())
			return next, n
		}
	}
}

func xor(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetInt(v0(f) ^ v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			f.data[i].SetUint(v0(f) ^ v1(f))
			return next, n
		}
	}
}

// Assign operators

func addAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.String:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetString(v0(f).String() + v1(f).String())
			return next, n
		}
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) + v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) + v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) + v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() + v1(f).Complex())
			return next, n
		}
	}
}

func andAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) & v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) & v1(f))
			return next, n
		}
	}
}

func andnotAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) &^ v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) &^ v1(f))
			return next, n
		}
	}
}

func mulAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) * v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) * v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) * v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() * v1(f).Complex())
			return next, n
		}
	}
}

func orAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) | v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) | v1(f))
			return next, n
		}
	}
}

func quoAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) / v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) / v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) / v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() / v1(f).Complex())
			return next, n
		}
	}
}

func remAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) % v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) % v1(f))
			return next, n
		}
	}
}

func shlAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) << v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) << v1(f))
			return next, n
		}
	}
}

func shrAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) >> v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) >> v1(f))
			return next, n
		}
	}
}

func subAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) - v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) - v1(f))
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) - v1(f))
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() - v1(f).Complex())
			return next, n
		}
	}
}

func xorAssign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) ^ v1(f))
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) ^ v1(f))
			return next, n
		}
	}
}

func dec(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) - 1)
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) - 1)
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) - 1)
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() - 1)
			return next, n
		}
	}
}

func inc(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetInt(v0(f) + 1)
			return next, n
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetUint(v0(f) + 1)
			return next, n
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetFloat(v0(f) + 1)
			return next, n
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		n.exec = func(f *Frame) (Builtin, *Node) {
			value(f).SetComplex(v0(f).Complex() + 1)
			return next, n
		}
	}
}

func equal(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) == v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) == v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) == v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) == v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) == v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) == v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) == v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) == v1(f))
				return tnext, n
			}
		}
	}
}

func greater(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) > v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) > v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) > v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) > v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) > v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) > v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) > v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) > v1(f))
				return tnext, n
			}
		}
	}
}

func greaterEqual(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) >= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) >= v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) >= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) >= v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) >= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) >= v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) >= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) >= v1(f))
				return tnext, n
			}
		}
	}
}

func lower(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) < v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) < v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) < v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) < v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) < v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) < v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) < v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) < v1(f))
				return tnext, n
			}
		}
	}
}

func lowerEqual(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) <= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) <= v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) <= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) <= v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) <= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) <= v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) <= v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) <= v1(f))
				return tnext, n
			}
		}
	}
}

func notEqual(n *Node) {
	tnext := getExec(n.tnext)

	switch t0, t1 := n.child[0].typ, n.child[1].typ; {
	case isString(t0) || isString(t1):
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) != v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) != v1(f))
				return tnext, n
			}
		}
	case isFloat(t0) || isFloat(t1):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) != v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) != v1(f))
				return tnext, n
			}
		}
	case isUint(t0) || isUint(t1):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) != v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) != v1(f))
				return tnext, n
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) (Builtin, *Node) {
				if v0(f) != v1(f) {
					return tnext, n
				}
				return fnext, n
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) (Builtin, *Node) {
				f.data[i].SetBool(v0(f) != v1(f))
				return tnext, n
			}
		}
	}
}
