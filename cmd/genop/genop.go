package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"log"
	"text/template"
)

const model = `package interp

// Code generated by 'go run ../cmd/genop/genop.go'. DO NOT EDIT.

import "reflect"

// Arithmetic operators
{{range $name, $op := .Arithmetic}}
func {{$name}}(n *Node) {
	i := n.findex
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch typ.Kind() {
	{{- if $op.Str}}
	case reflect.String:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) Builtin {
			f.data[i].SetString(v0(f).String() {{$op.Name}} v1(f).String())
			return next
		}
	{{- end}}
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		{{- if $op.Shift}}
		v1 := genValueUint(n.child[1])
		{{else}}
		v1 := genValueInt(n.child[1])
		{{end -}}
		n.exec = func(f *Frame) Builtin {
			f.data[i].SetInt(v0(f) {{$op.Name}} v1(f))
			return next
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) Builtin {
			f.data[i].SetUint(v0(f) {{$op.Name}} v1(f))
			return next
		}
	{{- if $op.Float}}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) Builtin {
			f.data[i].SetFloat(v0(f) {{$op.Name}} v1(f))
			return next
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) Builtin {
			f.data[i].SetComplex(v0(f).Complex() {{$op.Name}} v1(f).Complex())
			return next
		}
	{{- end}}
	}
}
{{end}}
// Assign operators
{{range $name, $op := .Arithmetic}}
func {{$name}}Assign(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	{{- if $op.Str}}
	case reflect.String:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) Builtin {
			value(f).SetString(v0(f).String() {{$op.Name}} v1(f).String())
			return next
		}
	{{- end}}
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		{{- if $op.Shift}}
		v1 := genValueUint(n.child[1])
		{{else}}
		v1 := genValueInt(n.child[1])
		{{end -}}
		n.exec = func(f *Frame) Builtin {
			value(f).SetInt(v0(f) {{$op.Name}} v1(f))
			return next
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		n.exec = func(f *Frame) Builtin {
			value(f).SetUint(v0(f) {{$op.Name}} v1(f))
			return next
		}
	{{- if $op.Float}}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		n.exec = func(f *Frame) Builtin {
			value(f).SetFloat(v0(f) {{$op.Name}} v1(f))
			return next
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		v1 := genValue(n.child[1])
		n.exec = func(f *Frame) Builtin {
			value(f).SetComplex(v0(f).Complex() {{$op.Name}} v1(f).Complex())
			return next
		}
	{{- end}}
	}
}
{{end}}
{{range $name, $op := .IncDec}}
func {{$name}}(n *Node) {
	next := getExec(n.tnext)
	typ := n.typ.TypeOf()
	value := genValue(n.child[0])

	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		v0 := genValueInt(n.child[0])
		n.exec = func(f *Frame) Builtin {
			value(f).SetInt(v0(f) {{$op.Name}} 1)
			return next
		}
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		v0 := genValueUint(n.child[0])
		n.exec = func(f *Frame) Builtin {
			value(f).SetUint(v0(f) {{$op.Name}} 1)
			return next
		}
	case reflect.Float32, reflect.Float64:
		v0 := genValueFloat(n.child[0])
		n.exec = func(f *Frame) Builtin {
			value(f).SetFloat(v0(f) {{$op.Name}} 1)
			return next
		}
	case reflect.Complex64, reflect.Complex128:
		v0 := genValue(n.child[0])
		n.exec = func(f *Frame) Builtin {
			value(f).SetComplex(v0(f).Complex() {{$op.Name}} 1)
			return next
		}
	}
}
{{end}}
{{range $name, $op := .Comparison}}
func {{$name}}(n *Node) {
	tnext := getExec(n.tnext)
	typ := n.typ.TypeOf()

	switch {
	case typ.Kind() == reflect.String:
		v0 := genValueString(n.child[0])
		v1 := genValueString(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) Builtin {
				if v0(f) {{$op.Name}} v1(f) {
					return tnext
				}
				return fnext
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) Builtin {
				f.data[i].SetBool(v0(f) {{$op.Name}} v1(f))
				return tnext
			}
		}
	case isFloat(n.child[0].typ) || isFloat(n.child[1].typ):
		v0 := genValueFloat(n.child[0])
		v1 := genValueFloat(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) Builtin {
				if v0(f) {{$op.Name}} v1(f) {
					return tnext
				}
				return fnext
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) Builtin {
				f.data[i].SetBool(v0(f) {{$op.Name}} v1(f))
				return tnext
			}
		}
	case isUint(n.child[0].typ) || isUint(n.child[1].typ):
		v0 := genValueUint(n.child[0])
		v1 := genValueUint(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) Builtin {
				if v0(f) {{$op.Name}} v1(f) {
					return tnext
				}
				return fnext
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) Builtin {
				f.data[i].SetBool(v0(f) {{$op.Name}} v1(f))
				return tnext
			}
		}
	default:
		v0 := genValueInt(n.child[0])
		v1 := genValueInt(n.child[1])
		if n.fnext != nil {
			fnext := getExec(n.fnext)
			n.exec = func(f *Frame) Builtin {
				if v0(f) {{$op.Name}} v1(f) {
					return tnext
				}
				return fnext
			}
		} else {
			i := n.findex
			n.exec = func(f *Frame) Builtin {
				f.data[i].SetBool(v0(f) {{$op.Name}} v1(f))
				return tnext
			}
		}
	}
}
{{end}}
`

// Op define operator name and properties
type Op struct {
	Name  string // +, -, ...
	Str   bool   // true if operator applies to string
	Float bool   // true if operator applies to float
	Shift bool   // true if operator is a shift operation
}

func main() {
	base := template.New("goexports")
	parse, err := base.Parse(model)
	if err != nil {
		log.Fatal(err)
	}

	b := &bytes.Buffer{}
	data := map[string]interface{}{
		"Arithmetic": map[string]Op{
			"add":    {"+", true, true, false},
			"sub":    {"-", false, true, false},
			"mul":    {"*", false, true, false},
			"quo":    {"/", false, true, false},
			"rem":    {"%", false, false, false},
			"shl":    {"<<", false, false, true},
			"shr":    {">>", false, false, true},
			"and":    {"&", false, false, false},
			"or":     {"|", false, false, false},
			"xor":    {"^", false, false, false},
			"andnot": {"&^", false, false, false},
		},
		"IncDec": map[string]Op{
			"inc": {Name: "+"},
			"dec": {Name: "-"},
		},
		"Comparison": map[string]Op{
			"equal":        {Name: "=="},
			"greater":      {Name: ">"},
			"greaterEqual": {Name: ">="},
			"lower":        {Name: "<"},
			"lowerEqual":   {Name: "<="},
			"notEqual":     {Name: "!="},
		},
	}
	if err = parse.Execute(b, data); err != nil {
		log.Fatal(err)
	}

	// gofmt
	source, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err = ioutil.WriteFile("op.go", source, 0666); err != nil {
		log.Fatal(err)
	}
}
