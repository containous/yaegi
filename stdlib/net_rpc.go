package stdlib

// Code generated by 'goexports net/rpc'. DO NOT EDIT.

import (
	"net/rpc"
	"reflect"
)

func init() {
	Value["net/rpc"] = map[string]reflect.Value{
		"Accept":             reflect.ValueOf(rpc.Accept),
		"DefaultDebugPath":   reflect.ValueOf(rpc.DefaultDebugPath),
		"DefaultRPCPath":     reflect.ValueOf(rpc.DefaultRPCPath),
		"DefaultServer":      reflect.ValueOf(&rpc.DefaultServer).Elem(),
		"Dial":               reflect.ValueOf(rpc.Dial),
		"DialHTTP":           reflect.ValueOf(rpc.DialHTTP),
		"DialHTTPPath":       reflect.ValueOf(rpc.DialHTTPPath),
		"ErrShutdown":        reflect.ValueOf(&rpc.ErrShutdown).Elem(),
		"HandleHTTP":         reflect.ValueOf(rpc.HandleHTTP),
		"NewClient":          reflect.ValueOf(rpc.NewClient),
		"NewClientWithCodec": reflect.ValueOf(rpc.NewClientWithCodec),
		"NewServer":          reflect.ValueOf(rpc.NewServer),
		"Register":           reflect.ValueOf(rpc.Register),
		"RegisterName":       reflect.ValueOf(rpc.RegisterName),
		"ServeCodec":         reflect.ValueOf(rpc.ServeCodec),
		"ServeConn":          reflect.ValueOf(rpc.ServeConn),
		"ServeRequest":       reflect.ValueOf(rpc.ServeRequest),
	}

	Type["net/rpc"] = map[string]reflect.Type{
		"Call":        reflect.TypeOf((*rpc.Call)(nil)).Elem(),
		"Client":      reflect.TypeOf((*rpc.Client)(nil)).Elem(),
		"ClientCodec": reflect.TypeOf((*rpc.ClientCodec)(nil)).Elem(),
		"Request":     reflect.TypeOf((*rpc.Request)(nil)).Elem(),
		"Response":    reflect.TypeOf((*rpc.Response)(nil)).Elem(),
		"Server":      reflect.TypeOf((*rpc.Server)(nil)).Elem(),
		"ServerCodec": reflect.TypeOf((*rpc.ServerCodec)(nil)).Elem(),
		"ServerError": reflect.TypeOf((*rpc.ServerError)(nil)).Elem(),
	}
}
