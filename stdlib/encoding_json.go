package stdlib

// Code generated by 'goexports encoding/json'. DO NOT EDIT.

import (
	"encoding/json"
	"reflect"
)

func init() {
	Value["encoding/json"] = map[string]reflect.Value{
		"Compact":       reflect.ValueOf(json.Compact),
		"HTMLEscape":    reflect.ValueOf(json.HTMLEscape),
		"Indent":        reflect.ValueOf(json.Indent),
		"Marshal":       reflect.ValueOf(json.Marshal),
		"MarshalIndent": reflect.ValueOf(json.MarshalIndent),
		"NewDecoder":    reflect.ValueOf(json.NewDecoder),
		"NewEncoder":    reflect.ValueOf(json.NewEncoder),
		"Unmarshal":     reflect.ValueOf(json.Unmarshal),
		"Valid":         reflect.ValueOf(json.Valid),
	}

	Type["encoding/json"] = map[string]reflect.Type{
		"Decoder":               reflect.TypeOf((*json.Decoder)(nil)).Elem(),
		"Delim":                 reflect.TypeOf((*json.Delim)(nil)).Elem(),
		"Encoder":               reflect.TypeOf((*json.Encoder)(nil)).Elem(),
		"InvalidUTF8Error":      reflect.TypeOf((*json.InvalidUTF8Error)(nil)).Elem(),
		"InvalidUnmarshalError": reflect.TypeOf((*json.InvalidUnmarshalError)(nil)).Elem(),
		"Marshaler":             reflect.TypeOf((*json.Marshaler)(nil)).Elem(),
		"MarshalerError":        reflect.TypeOf((*json.MarshalerError)(nil)).Elem(),
		"Number":                reflect.TypeOf((*json.Number)(nil)).Elem(),
		"RawMessage":            reflect.TypeOf((*json.RawMessage)(nil)).Elem(),
		"SyntaxError":           reflect.TypeOf((*json.SyntaxError)(nil)).Elem(),
		"Token":                 reflect.TypeOf((*json.Token)(nil)).Elem(),
		"UnmarshalFieldError":   reflect.TypeOf((*json.UnmarshalFieldError)(nil)).Elem(),
		"UnmarshalTypeError":    reflect.TypeOf((*json.UnmarshalTypeError)(nil)).Elem(),
		"Unmarshaler":           reflect.TypeOf((*json.Unmarshaler)(nil)).Elem(),
		"UnsupportedTypeError":  reflect.TypeOf((*json.UnsupportedTypeError)(nil)).Elem(),
		"UnsupportedValueError": reflect.TypeOf((*json.UnsupportedValueError)(nil)).Elem(),
	}
}
