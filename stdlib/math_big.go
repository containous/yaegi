package stdlib

// Code generated by 'goexports math/big'. DO NOT EDIT.

import (
	"math/big"
	"reflect"
)

func init() {
	Value["math/big"] = map[string]reflect.Value{
		"Above":         reflect.ValueOf(big.Above),
		"AwayFromZero":  reflect.ValueOf(big.AwayFromZero),
		"Below":         reflect.ValueOf(big.Below),
		"Exact":         reflect.ValueOf(big.Exact),
		"Jacobi":        reflect.ValueOf(big.Jacobi),
		"MaxBase":       reflect.ValueOf(big.MaxBase),
		"MaxExp":        reflect.ValueOf(big.MaxExp),
		"MaxPrec":       reflect.ValueOf(uint32(big.MaxPrec)),
		"MinExp":        reflect.ValueOf(big.MinExp),
		"NewFloat":      reflect.ValueOf(big.NewFloat),
		"NewInt":        reflect.ValueOf(big.NewInt),
		"NewRat":        reflect.ValueOf(big.NewRat),
		"ParseFloat":    reflect.ValueOf(big.ParseFloat),
		"ToNearestAway": reflect.ValueOf(big.ToNearestAway),
		"ToNearestEven": reflect.ValueOf(big.ToNearestEven),
		"ToNegativeInf": reflect.ValueOf(big.ToNegativeInf),
		"ToPositiveInf": reflect.ValueOf(big.ToPositiveInf),
		"ToZero":        reflect.ValueOf(big.ToZero),
	}

	Type["math/big"] = map[string]reflect.Type{
		"Accuracy":     reflect.TypeOf((*big.Accuracy)(nil)).Elem(),
		"ErrNaN":       reflect.TypeOf((*big.ErrNaN)(nil)).Elem(),
		"Float":        reflect.TypeOf((*big.Float)(nil)).Elem(),
		"Int":          reflect.TypeOf((*big.Int)(nil)).Elem(),
		"Rat":          reflect.TypeOf((*big.Rat)(nil)).Elem(),
		"RoundingMode": reflect.TypeOf((*big.RoundingMode)(nil)).Elem(),
		"Word":         reflect.TypeOf((*big.Word)(nil)).Elem(),
	}
}
